#!/bin/bash

CONFIG_PATH=/etc/ssl_expire
CONFIG_FILE=ssl_expire.conf
SERVICE_PATH=/etc/systemd/system
SERVICE_NAME=ssl_expire_mon.service
BIN_PATH=/usr/bin
BIN_MAIN_NAME=ssl_expire
BIN_MON_NAME=ssl_expire_mon


function usage ()
{
    echo "script usage: $(basename $0) [-i https://example.com]" >&2
    echo "-i    [address]                       address to get ssl certificate from (required)"
    echo "-s                                    flag save to file"
    echo "-f    [filename]                      file to save information to"
    echo "-t    [timeout]                       connection timeout in seconds (default: 5 seconds)"
    echo "--make-config                         create default configuration"
    echo "--create-service [configPath]         create monitoring service based on config file in /etc/ssl_expire"
    echo "-h                                    show this"
    exit 1
}

function makeconfig ()
{
    echo "Creating configuration file $CONFIG_PATH/$CONFIG_FILE ..."
    if [[ ! -d "$CONFIG_PATH" ]]
    then
        mkdir "$CONFIG_PATH"
    fi
    echo "
# Configuration file for ssl expire monitoring system
ZabbixServer=127.0.0.1
Hostname=SSL_EXPIRE
Key=data
# Websites=(google.com yandex.ru dedic74.ru)
Websites=()
    " > "$CONFIG_PATH"/"$CONFIG_FILE"
    echo "Default configuration is created"
    exit 1
}

function createservice ()
{
    local config=
    if [ ""="$config" ]
    then
        config="$CONFIG_FILE"
        echo "Creating service based on default configuration"
    else
        config="$1"
        echo "Creating service based on $1 configuration"
    fi

    cp ./ssl_expire "$BIN_PATH"/

    echo "#!/bin/bash

CONFIG_PATH=$CONFIG_PATH
CONFIG_FILE=$config

source "\$CONFIG_PATH"/"\$CONFIG_FILE"

while [ : ]
do
    for site in \${\$Websites[@]}; do
        data=\$(ssl_expire --ip "\$site")
        zabbix_sender -z "\$ZabbixServer" -s "\$Hostname" -k "\$Key" -o "\$data"
        sleep 1
    done
    sleep 10
done" > "$BIN_PATH"/"$BIN_MON_NAME"

    echo "
[Unit]
Description=Monitoring of web site ssl expiration date and sending it to zabbix server
After=network.target

[Service]
Type=simple
ExecStart=ssl_expire_mon

[Install]
WantedBy=multi-user.target
    " > "$SERVICE_PATH"/"$SERVICE_NAME"
    exit 0
}

VALID_ARGS=$(getopt -o i:sf:ht: --long ip:,timeout:,save,file:,help,make-config,create-service -- "$@")
if [[ $? -ne 0 ]]; then
    usage
fi

eval set -- "$VALID_ARGS"
while [ : ]; do
  case "$1" in
    -i | --ip)
        IP="$2"
        shift
        ;;
    -t | --timeout)
        TIMEOUT="$2"
        shift
        ;;
    -s | --save)
        SAVE=1
        shift 2
        ;;
    -f | --file)
        FILE="$2"
        shift 2
        ;;
    --make-config)
        makeconfig
        ;;
    --create-service)
        createservice $2
        ;;
    -h | --help)
        usage
        ;;
    --) shift; 
        break 
        ;;
    *)
        break
        ;;
  esac
done

while getopts 'i:sf:ht:' OPTION; do
    case "$OPTION" in
        i)
            IP="$OPTARG"
            ;;
        t)
            TIMEOUT="$OPTARG"
            ;;
        f)
            FILE="$OPTARG"
            ;;
        s)
            SAVE=1
            ;;
        ?|h)
            usage
            ;;
    esac
done

if [ "" == "$IP" ]
then
    echo "please provide correct address"
    usage
fi


if [ "" == "$FILE" ]
then
    FILE=$(echo "$IP" | cut -d"/" -f 3)-sslinfo
fi

if [ "" == "$TIMEOUT" ]
then
    TIMEOUT=5
fi

currentDate=$(date)

cerinfo=$(curl --connect-timeout "$TIMEOUT" https://"$IP" -vI --stderr - | grep -A 6  "Server certificate")

if [ "" == "$cerinfo" ]
then
    echo "connection exceeded "$TIMEOUT"s timeout. cancelling..."
    exit 1
fi

if [ "$SAVE" == 1 ]
then
    echo "$cerinfo" > "$FILE"
fi

expireDate=$(echo "$cerinfo" | grep "expire date" | cut -d":" -f 2-)
echo "$expireDate"

expireDateEpoch=$(date --date "$expireDate" "+%s")
currentDateEpoch=$(date --date "$currentDate" "+%s")

diff=$(( (expireDateEpoch - currentDateEpoch) / 86400 ))

echo "$diff"
