#!/bin/bash

CERTINFO_PATH=/etc/ssl_expire/certinfo


function usage ()
{
    echo "script usage: $(basename $0) [-i https://example.com]" >&2
    echo "-i    [address]                       address to get ssl certificate from (required)"
    echo "-s                                    flag save to file"
    echo "-f    [filename]                      file to save information to"
    echo "-t    [timeout]                       connection timeout in seconds (default: 5 seconds)"
    echo "-h                                    show this"
    exit 1
}

VALID_ARGS=$(getopt -o i:sf:ht: --long ip:,timeout:,save,file:,help,make-config,create-service -- "$@")
if [[ $? -ne 0 ]]; then
    usage
fi

eval set -- "$VALID_ARGS"
while [ : ]; do
  case "$1" in
    -i | --ip)
        IP="$2"
        shift
        ;;
    -t | --timeout)
        TIMEOUT="$2"
        shift
        ;;
    -s | --save)
        SAVE=1
        shift 2
        ;;
    -f | --file)
        FILE="$2"
        shift 2
        ;;
    -h | --help)
        usage
        ;;
    --) shift; 
        break 
        ;;
    *)
        break
        ;;
  esac
done

if [ "" == "$IP" ]
then
    echo "please provide correct address"
    usage
fi


if [ "" == "$FILE" ]
then
    FILE=$(echo "$IP" | cut -d"/" -f 3)-sslinfo
fi

if [ "" == "$TIMEOUT" ]
then
    TIMEOUT=5
fi

currentDate=$(date)

certinfo=$(curl --connect-timeout "$TIMEOUT" https://"$IP" -vI --stderr - | grep -A 6  "Server certificate")

if [ "" == "$certinfo" ]
then
    echo "connection exceeded "$TIMEOUT"s timeout. cancelling..."
    exit 1
fi

if [ "$SAVE" == 1 ]
then
    if [ [ ! -d "$CERTINFO_PATH"] ]
    then
        mkdir "$CERTINFO_PATH"
    fi
    echo "$certinfo" > "$CERTINFO_PATH"/"$FILE"
fi

expireDate=$(echo "$certinfo" | grep "expire date" | cut -d":" -f 2-)

expireDateEpoch=$(date --date "$expireDate" "+%s")
currentDateEpoch=$(date --date "$currentDate" "+%s")

diff=$(( (expireDateEpoch - currentDateEpoch) / 86400 ))

echo "$diff"
exit 0